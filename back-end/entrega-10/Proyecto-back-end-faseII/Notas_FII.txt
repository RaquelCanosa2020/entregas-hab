Aplicaci√≥n en la que incluir un diario de viajes.
Los usuarios pueden incluir fecha, lugar, descripci√≥n, imagen de cada viaje.
Se puede votar cada viaje.


********************üë£SISTEMA DE USUARIOSüë£***************************************

Tenemos los siguientes archivos:

‚è©.env: donde hab√≠amos establecido como variables de entorno los datos de la BD (user, password..), incluimos en esta fase, una clave SECRET para el token y la sendgrid_key
para enviar correos. Incluido en el gitignore.


‚è© db.js: establece la conexi√≥n con la BD, tomando los valores de host, user, etc., de .env.NO CAMBIA.

‚è© initDB.js: nos sirve para resetear la BD cuando hagamos pruebas. Borra las tablas actuales (üèÆOJOüèÆ) e introduce nuevas con datos de prueba. Incluimos datos necesarios para el 
	sistema de usuarios.

‚è© server.js: es el archivo principal, en √©l cargamos los m√≥dulos necesarios, y las middlewares que vamos desarrollando en otros archivos y los asociamos a cada ruta (endpoint)
	el middleware de error gen√©rico  y de not found, as√≠ como la conexi√≥n al puerto. En esta fase vamos incluyendo los m√≥dulos de gesti√≥n de usuarios. Adem√°s, en los de contenido
	que s√≥lo pueden ser realizados por usuarios registrados, incluimos el middleware de isUser.

‚è© controllers/diary: en este directorio incluimos las diferentes funciones a llamar y ejecutar en server.js, con las distintas acciones del diario (listas entradas, nueva entrada, etc.)
	Introducimos cambios en muchos de ellos para el sistema de usuarios (pej, votos, incluimos qu√© usuario vot√≥, que s√≥lo pueda editar un viaje el usuario que lo cre√≥, en votaciones cambiamos la ip por el usuario, etc).

‚è© controllers/users: creamos los diferentes controllers para el sistema de usuarios (nuevo usuario, registro, login, etc).

‚è© middlewares/entryExist.js: dado que muchos controllers necesitan comprobar si una determinada entrada (id), indicada por el usuario, existe, se realiza este middleware que ser√° ejecutado. No cambia.
	en muchos de ellos (para ahorrar c√≥digo).

‚è© middlewares/isUer.js: en el sistema de usuarios, muchos controllers necesitan comprobar si el usuario que realiza la operaci√≥n es el autorizado (pej, el que cre√≥ la entrada o admin).

‚è© middlewares/isAdmin.js: en el sistema de usuarios, s√≥lo vamos a permitir que borre usuarios el administrador. Este middl comprueba que el que accede es admin.

‚è© helpers.js: aqu√≠ hab√≠amos incluido funciones auxiliares que son necesarias: formatear fechas, guardado y borrado de im√°genes. Ahora incluimos: randomString(para que usuarios activen cuenta),

	sendMail (para env√≠o de correos a usuarios)


***************************************************************************************.

	üèÆALGUNAS COSAS MUY IMPORTANTESüèÆ

‚õî No incluir directamente inputs que introduzca el usuario, ya que podr√≠a incluir algo que nos estropease la BD.

	Para ello, incluimos en las consultas el s√≠mbolo ?, y como segundo par√°metro de connection.query, pej: [`%${search}%`] 

‚õî Nunca guardar contrase√±as en la base de datos. Debemos encriptarlas primero, con bcrypt u otro sistema. Fundamental proteger sobre todo el token de usuario.


üîµ cuando incluimos elementos en la base de datos, es √∫til el par√°metro result.insertId, nos da el id del elemento que acabamos de incluir.


*****************************************************************************************

En todos los middl el proceso es similar:

1. Llamamos a la conexi√≥n (connection = await getConnection)
2. Sacamos los datos de los par√°metros, desestructurando, de req.body = {dato1, dato2} (esto podemos hacerlo gracias al body-parser, si no
el body saldr√≠a vac√≠o) y de req.params(id).
3. Cuando es una operaci√≥n sobre un id concreto, comprobamos que existe (entryExists) 
4. Ejecutamos query seg√∫n operaci√≥n const [] = await connection.query(A,B) A es el `sql de la consulta/acci√≥n` con ? en los datos que debe proporcionar usuario. 
	B: [par√°metros]
5. Enviamos res.send({status:"ok",message:""});
6. Cerramos la conexi√≥n connection.release()

7. Validaci√≥n. CUando el usuario hace clic, estamos haciendo una llamada get seg√∫n el middl de validaci√≥n (se pone en marcha esta funci√≥n)

SENGRID-KEY=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
